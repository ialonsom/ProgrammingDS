def exercise2():

    """
    Compute the distribution of attacks and IP addresses. The distribution must be computed in quarters.
    """
    """
    Example for valid session:
     - Accepted password for aftoral from 79.150.140.15 port 57667 ssh2
    Example of invalid attempt:
     - Invalid user yoyo from 106.52.116.101 port 53873
     - Failed password for invalid user yoyo from 106.52.116.101 port 53873 ssh2
    """
    
    # Pattern to find the IP of each attempt
    pattern = re.compile("Invalid user \w* from (\d*.\d*.\d*.\d*) | Failed password for invalid user \w* from (\d*.\d*.\d*.\d*) | Accepted password for \w* from (\d*.\d*.\d*.\d*)")

    # Create a dictionary to store the user names and login attempts
    attempts = dict([])

    # count to sum all the login attempts
    count = 0

    # Define the number of unics attempts for each quarter
    n_q1 = 0
    n_q2 = 0
    n_q3 = 0
    n_q4 = 0

    for line in open("messages_syslog_class.txt"):
        for match in re.finditer(pattern, line):
            try:
                # When the limit of the first quartile is passed, the dictionary is cleaned to store new unique IPs again
                if (count == 20459):
                    attempts = dict([])
                # When the limit of the second quartile is passed, the dictionary is cleaned to store new unique IPs again
                if (count == 40918):
                    attempts = dict([])
                # When the limit of the third quartile is passed, the dictionary is cleaned to store new unique IPs again
                if (count == 61377):
                    attempts = dict([])
                
                # If the user exists we add one to the number of attempts

                # Check if the match is for the first component of the pattern (group 1)
                if match.group(1)!='None':
                    attempts[match.group(1)] += 1
                    count += 1
                # Check if the match is for the second component of the pattern (group 2)
                if match.group(2)!='None':
                    attempts[match.group(2)] += 1
                    count += 1
                # Check if the match is for the third component of the pattern (group 3)
                if match.group(3)!='None':
                    attempts[match.group(3)] += 1
                    count += 1

            except:
                # If the user doesn't exist we store the new user

                # Check if the match is for the first component of the pattern (group 1)
                if match.group(1)!='None':
                    attempts[match.group(1)] =  1
                    count += 1

                # Check if the match is for the second component of the pattern (group 2)
                if match.group(2)!='None':
                    attempts[match.group(2)] =  1
                    count += 1

                # Check if the match is for the second component of the pattern (group 2)
                if match.group(3)!='None':
                    attempts[match.group(3)] =  1
                    count += 1

                # The count of unique IPs in the first quantile is increased if the count is in the first quartile
                if (count <= 20459):
                    n_q1 += 1

                # The count of unique IPs in the second quantile is increased if the count is in the second quartile
                if (20459 < count <= 40918):
                    n_q2 += 1

                # The count of unique IPs in the third quantile is increased if the count is in the third quartile
                if (40918 < count <= 61377):
                    n_q3 += 1

                # The count of unique IPs in the fourth quantile is increased if the count is in the fourth quartile
                if (61377 < count <= 81836):
                    n_q4 += 1

    print("Exercise 2")
    print()

    # Calculate the quarters of the login attempts
    q1 = count/4
    print("Quarters: ", q1, q1*2, q1*3, q1*4)

    '''
    # Create a loop to extract the number of attempts of each IP
    for attempt in attempts:

        # Check if the IP belongs to the first quarter
        if (attempts[attempt] <= q1):
            # If it belongs to the first quarter add 1
            n_q1 += 1

        # Check if the IP belongs to the second quarter
        if (attempts[attempt] > q1 and attempts[attempt] <= q1*2):

            # If it belongs to the second quarter add 1
            n_q2 += 1

        # Check if the IP belongs to the third quarter
        if attempts[attempt] > q1*2 and attempts[attempt] <= q1*3:
            
            # If it belongs to the third quarter add 1
            n_q3 += 1

        # Check if the IP belongs to the fourth quarter
        if attempts[attempt] > q1*3 and attempts[attempt] <= q1*4:

            # If it belongs to the second fourth add 1
            n_q4 += 1
    '''
    # Print the distribution
    distribution = [("0 < x <= q1",n_q1), (" q1 < x <= q2",n_q2), ("q2 < x <= q3",n_q4), ("q3 < x <= q4",n_q4)]
    print(distribution)
    print()
